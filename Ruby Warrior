
class Player
  
	#attr_accessor :direction
	#attr_accessor :health
	#attr_accessor :whereami

	# Инициализация
	def initialize
		@direction 	= :forward
		@health		= 20
		@whereami	= 0
		@tactical_move	= false
		@first_turn	= true
		@is_enemy_behind_us = false
	end 
  
 	# Фунеция принятия решения 
 	def play_turn(warrior) 


		# Основной цикл принятия решения

			# Значит делаем так:
			# проверяем что воин не стоит носом в стену. 
			if not have_to_pivot(warrior) then 

				# На первом шаге, проверим, что у нас за спиной
				if @first_turn then
					
					arr_space = warrior.look(:backward)
					arr_space.each do |lock_space|
						if lock_space.captive?
							@direction = :backward
						end
					end

					@first_turn = false
				end

				@is_enemy_behind_us = false
				arr_space = warrior.look(:backward)
				arr_space.each do |lock_space|
					if lock_space.enemy?
						@is_enemy_behind_us = true
					end
				end

				# пробуем двигаться, если это возможно, тогда фонкция движения 
				# должна возвращать истину если сдвинуться получилось. 
	                        # ИСКЛЮЧЕНИЕ, если у него мало здорровья и ни кто его не атакует, 
				# то он должен выличить себя до нужного предела. 
				# если враг далеко - стреляем из лука

				if @is_enemy_behind_us then

					warrior.shoot!(:backward)
 
				elsif look_for_enemy(warrior) > 0 then
					
					warrior.shoot!(@direction) 

				elsif low_health?(warrior) then

					heal_rest(warrior) 

				elsif move(warrior) then

                		# Если он не сдвинулся и не стал лечиться, 
				# то ему следует проверит, 
				# что именно помешало движению, после чего 
				# решить что длаее делать. 
					
				# Если это пленный - освободить, 
				elsif check_captive_and_rescue(warrior) then

				# если это враг прямо перед нами - рубить мечом, 
				elsif look_for_enemy(warrior) == 0 then 
							
					warrior.attack!(@direction)
						
				end 
			end          

		# Конец цикла принятия решения

    		@health = warrior.health
 	end
        
	# Функция проверки необходимости лечения
    	def low_health?(warrior)
		(@health...20).cover? warrior.health
	end

	# Функция выполняет проверку возможности подлечиться и выполняет лечение 
	def heal_rest(warrior)
 		
		warrior.rest! if warrior.feel(@direction).empty? || warrior.feel(@direction).wall?
        end 
      
  
    	# Функция спасия пленных
    	def check_captive_and_rescue(warrior)
      
		if warrior.feel(@direction).captive? then 
			warrior.rescue!(@direction)
			return true
		else
			return false
		end
     	end

  	# Функция выполняет проверку возможности двигаться и передвигает война в направлении @direction
	# Возвращаемые значения:
	# 	Истина 	- если функция walk! была вызвана
	#	Ложь	- если проверка возможности двигаться провалена 
  	def move(warrior)
    
		# Если мы тактически отступали передохнуть, то наше направление 
		# движение нужно поменять на движение вперед

		if @tacktical_move then
			@direction = :forward
		end		
		
		# Если стаим у стены, то развернемся
		if warrior.feel(@direction).wall? and @direction == :backward then 
			toward() 
		end

		# Если мало здоровья и нас лупят, тогда выполняем тактическое отступление
		if warrior.health < @health and warrior. health < 10 and warrior.feel(@direction).empty?
			@direction = :backward
			@tacktical_move = true
		end

		# Ноги в руки и пошли
		if warrior.feel(@direction).empty? then 
			warrior.walk!(@direction) 
			return true
		else
			return false
    		end
		
    	end
  
	# Функция меняет направление выполняемых действий на обратную 
  	def toward()
    		
		# Поменяем направление на противоположенное  		
		if @direction == :backward then
      			@direction = :forward
     		else 
       			@direction = :backward
    		end	
  	end
	
	# Функция разворачивает война на 180 градусов, если воин стоит лицом к стине
  	def have_to_pivot(warrior)
		if warrior.feel(@direction).wall? and @direction == :forward then 
			warrior.pivot!
			return true
		else
			return false
		end
	end

	# Функция определят, что в трех шагах от нас есть только заданый объект
	def look_for_object(warrior, object)
		
		result = true
		
		arr_space = warrior.look(@direction)
		arr_space.each { |lock_space|
			if lock_space != object and not lock_space.empty? then
				result = false
			end
		}
		
		return result
	end

	# Функция проверяет три поля перд войном и возвращает индекс поля, на котором стоит враг
	# если врага перед войном нет, то возвращает -1		
	def look_for_enemy(warrior)

		if warrior.feel(@direction).enemy? then
			return 0
		end
		
		index = 0
		arr_space = warrior.look(@direction)
		arr_space.each { |lock_space|
			
			if lock_space.enemy? then
				return index
			elsif not lock_space.empty? then
				return -1
			end
			

			index = index + 1
		}
		
		return -1
	end
end
